close all; clear all;
%% Setup
est_sys_pos = open("est_sys_pos_chirp_75%.mat");
est_sys_pos = est_sys_pos.est_sys_pos;

h = 0.01; %sampling time 
sys = ss(est_sys_pos.A, est_sys_pos.B, est_sys_pos.C, est_sys_pos.D);
sysd = c2d(sys, h);

A = sysd.A;
B = sysd.B;
C = sysd.C;

Tsim = 60; % Simulation time
T_steps = Tsim / h; %amount of time steps

t_ref = [0:h:Tsim]';


%% Q and R
Q = [100,0;0,1];
R = 1;
[P,K,L] = idare(A,B,Q,R);

%% Construct LTI sys & dimensions
%Define the LTI system
LTI.A=A;
LTI.B=B;
LTI.C=C;
LTI.x0=[0 0]'; % to be defined

%Define the dimension of the system and horizon
dim.N=20;
dim.nx=size(LTI.A,1);
dim.ny=size(LTI.C,1);
dim.nu=size(LTI.B,2);

%Define the weights for the LQR problem
weight.R=R;
weight.Q=Q;
weight.P=P;   
%% Rewrite objective to depend on u_N, for minimizing
predmod=predmodgen(LTI,dim); %gives T and S         
[H,h_cost]=costgen(predmod,weight,dim); % V = 0.5*u'*H*u+(h*x_0)'*u

%% Optimizer setup
T = predmod.T;
S = predmod.S;

N = dim.N; %horizon
x=zeros(dim.nx,T_steps+1); %to be filled with states
u_rec=zeros(dim.nu,T_steps); %Optimal input sequence containing al the extracted first inputs
x(:,1)=LTI.x0; %initial state

% Constraints
u_contraint = 1;


%% MPC
y_ref = -[0.2*ones(1,T_steps/4), 0.3*ones(1,T_steps/4), 0.1*ones(1,T_steps/4), 0.38*ones(1,T_steps/4)+1),]';

%% Prepare input data
simin = [t_ref, y_ref];

sim helicoptertemplate_lqi_test_2
warning('off', 'all'); tic

%%


for k=1:T_steps
    

    %%%%%%%%%%%%%%%%%%%%%%%%%%%OTS%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    A_OT = [eye(dim.nx)-A, -B; C, 0];
    B_OT = [zeros(dim.nx,dim.nu); y_ref(k)];
    
    H_ots = [0 0 0;
             0 0 0;
             0 0 1];
    
    lb_ots = [-10000; 0; -1];
    ub_ots = -lb_ots;
    
    options = optimset('Display', 'off');
    OTS = quadprog(H_ots,[],[],[],A_OT,B_OT,lb_ots,ub_ots,[],options);
    x_ref = OTS(1:2);
    u_ref = OTS(3);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%OTS%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    

    %%%%%%%%%%%%%%%%%%%%%%%%%%%MPC%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    x_0=x(:,k);
    
    lb = -1*ones(N,dim.nu);
    ub = -0*lb;
    uN = quadprog(H,(h*[x_0; x_ref; u_ref]),[],[],[],[],lb,ub,[],options);

    % Select the first input only
    u_rec(k)=uN(1);
    
    % Compute the state/output evolution
    x(:,k+1)=LTI.A*x_0 + LTI.B*u_rec(k);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%MPC%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end


toc; warning('on', 'all');
%%
figure,
subplot(2,1,1)
plot(1/100*(0:T_steps),x(1:2,:))
hold on
plot(1/100*(1:T_steps),y_ref,'--',Color='b')
hold off
grid on
legend("$\alpha (rad)$","$\dot{\alpha} (rad/s)$", 'Interpreter','latex')
xlabel("Time (s)")
title("")

subplot(2,1,2)
plot(1/100*(1:T_steps),u_rec)
grid on
xlabel("Time (s)")
legend("$u$", 'Interpreter','latex')

%% CVX OTS
% cvx_begin quiet
%     variable xANDu_r(3)
%     minimize(xANDu_r(3)'*eye(1)*xANDu_r(3));
%     A_OT*xANDu_r==B_OT;                     %equality const
%     xANDu_r(3) <=  u_contraint;             %input const
%     xANDu_r(3) >= -u_contraint;
% cvx_end
% 
% x_ref = xANDu_r(1:2);
% u_ref = xANDu_r(3);
